//
//  ApiWorker.swift
//  SolutisSW2023
//
//  Created by Gabriel Roveri on 03/05/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

class ApiWorker
{
    func request<T: Decodable>(configuration: Configuration, response: T.Type, completion: @escaping (Result<T, ServiceError>) -> Void)
    {
        let url = configuration.baseURL + configuration.path
        
        guard let url = URL(string: url) else {
            
            completion(.failure(.urlError))
            
            return
        }
        
        let request = generateRequest(url: url, method: configuration.method.rawValue)
        
        let dataTask = URLSession.shared.dataTask(with: request as URLRequest) { data, response, error in
            
            DispatchQueue.main.async {
                guard error == nil else {
                    let errorMessage = error?.localizedDescription ?? "Server Error"
                    completion(.failure(.init(issueCode: .initValue(value: errorMessage))))
                    
                    return
                }
                
                guard let data = data, let httpResponse = response as? HTTPURLResponse else {
                    completion(.failure(ServiceError.notFoundData))
                    
                    return
                }
                
                guard self.isSuccess(httpResponse.statusCode) else {
                    completion(.failure(.notFoundData))
                    
                    return
                }
                
                do {
                    let decoder = JSONDecoder()
                    let responseObj = try decoder.decode(T.self, from: data)
                    completion(.success(responseObj))
                } catch {
                    debugPrint("\n----- Parse Model Error: \n", error)
                    debugPrint("\n----- End:")
                    completion(.failure(.parseError))
                }

            }
            
        }
        
        dataTask.resume()
    }
}

private extension ApiWorker {
    func generateRequest(url: URL, method: String) -> NSMutableURLRequest {
        let request = NSMutableURLRequest(url: url, cachePolicy: .useProtocolCachePolicy, timeoutInterval: 30.0)
        request.httpMethod = method
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("application/json", forHTTPHeaderField: "Accept")
        request.httpBody = nil
                
        return request
    }
    
    func generateParams(task: Task) -> ([String: Any]) {
        switch task {
        case .requestPlain:
            return ([:])
        case let .requestParameters(parameters):
            return (parameters)
        }
    }
    
    func isSuccess(_ code: Int) -> Bool {
        switch code {
        case 200...304:
            return true
        default:
            return false
        }
    }
}
