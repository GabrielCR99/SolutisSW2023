//
//  PlanetRouter.swift
//  SolutisSW2023
//
//  Created by Gabriel Roveri on 03/05/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

@objc protocol PlanetRoutingLogic {
    func goToPlanetDetailView()
}

protocol PlanetDataPassing {
    var dataStore: PlanetDataStore? { get }
}

final class PlanetRouter: PlanetDataPassing {
    weak var viewController: PlanetViewController?
    var dataStore: PlanetDataStore?
}

extension PlanetRouter: PlanetRoutingLogic {
    // MARK: Routing

    func goToPlanetDetailView() {
        let storyboard = UIStoryboard(name: "PlanetDetail", bundle: nil)
        guard let destinationVC = storyboard.instantiateViewController(
            withIdentifier: String(describing: PlanetDetailViewController.self))
                as? PlanetDetailViewController else { return }
        var destinationDS = destinationVC.router!.dataStore!
        passDataToPlanetDetail(source: dataStore!, destination: &destinationDS)
        navigateToPlanetDetail(source: viewController!, destination: destinationVC)
    }

    // MARK: Navigation

    func navigateToPlanetDetail(source: PlanetViewController, destination: PlanetDetailViewController) {
        DispatchQueue.main.async { [weak source] in
            source?.navigationController?.pushViewController(destination, animated: true)
        }
    }

    // MARK: Passing data

    func passDataToPlanetDetail(source: PlanetDataStore, destination: inout PlanetDetailDataStore) {
        guard let selectedRow = viewController?.tableView.indexPathForSelectedRow?.row,
              let selectedPlanet = source.planetsResponse?.planets?[selectedRow] else { return }

        destination.planet = selectedPlanet
    }
}
