//
//  PlanetViewController.swift
//  SolutisSW2023
//
//  Created by Gabriel Roveri on 03/05/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PlanetDisplayLogic: BaseViewControllerProtocol {
    func reloadTableViewData(with viewModel: Planet.FetchPlanets.ViewModel)
}

final class PlanetViewController: BaseViewController {
    // MARK: - IBOutlets

    @IBOutlet weak var tableView: UITableView!

    // MARK: - Public Variables

    var interactor: PlanetBusinessLogic?
    var router: (PlanetRoutingLogic & PlanetDataPassing)?

    // MARK: - Private Variables

    private var planets: [PlanetViewModel] = []

    // MARK: - Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: - Setup

    private func setup() {
        let viewController = self
        let interactor = PlanetInteractor()
        let presenter = PlanetPresenter()
        let router = PlanetRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        interactor?.setup()
    }

    // MARK: - Methods

    private func setupUI() {
        self.title = "Star Wars Planets"
        tableView?.dataSource = self
        tableView?.delegate = self
    }
}

extension PlanetViewController: PlanetDisplayLogic {

    func reloadTableViewData(with viewModel: Planet.FetchPlanets.ViewModel) {
        self.planets = viewModel.planets
        tableView?.reloadData()
    }

}

extension PlanetViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return planets.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = UITableViewCell(style: .default, reuseIdentifier: nil)
        let planet = planets[indexPath.row]
        var content = cell.defaultContentConfiguration()
        content.text = planet.name
        cell.contentConfiguration = content

        return cell
    }
}

extension PlanetViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        router?.goToPlanetDetailView()
    }
}
