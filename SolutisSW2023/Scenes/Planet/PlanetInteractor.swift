//
//  PlanetInteractor.swift
//  SolutisSW2023
//
//  Created by Gabriel Roveri on 03/05/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PlanetBusinessLogic {
    func viewDidLoad()
    func reloadTableViewData()
}

protocol PlanetDataStore {
    var planetsResponse: Planet.FetchPlanets.Response? { get set }
}

final class PlanetInteractor: PlanetDataStore {
    // MARK: - Public Variables

    var presenter: PlanetPresentationLogic?
    var worker: PlanetWorker?
    var planetsResponse: Planet.FetchPlanets.Response?

    // MARK: - Private variables

    private let waitingToStartGroup = DispatchGroup()

    // MARK: Methods

    func fetchPlanets() {
        waitingToStartGroup.enter()
        worker = PlanetWorker()
        worker?.getPlanetsOrError(completion: { [weak self] result in
            defer {
                self?.waitingToStartGroup.leave()
            }

            switch result {
            case .success(let success):
                self?.planetsResponse = Planet.FetchPlanets.Response(planets: success)
            case .failure(let failure):
                self?.planetsResponse = Planet.FetchPlanets.Response(error: failure)
            }
        })
    }
}

extension PlanetInteractor: PlanetBusinessLogic {
    func viewDidLoad() {
        presenter?.showLoading()
        fetchPlanets()

        waitingToStartGroup.notify(queue: .main) { [weak self] in
            self?.presenter?.hideLoading()
            guard let self = self, let planets = planetsResponse else { return }

            if let error = planets.error {
                self.presenter?.showError(error)
            }

            self.presenter?.presentPlanets(response: planets)

        }

    }

    func reloadTableViewData() {
        guard let planets = planetsResponse else { return }

        presenter?.presentPlanets(response: planets)
    }
}
