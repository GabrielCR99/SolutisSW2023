//
//  PlanetDetailViewController.swift
//  SolutisSW2023
//
//  Created by Gabriel Roveri on 03/05/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PlanetDetailDisplayLogic: AnyObject {
    func updateUI(with viewModel: PlanetDetail.FetchPlanetDetail.ViewModel)
    func updateIsFavoritePlanet()
}

final class PlanetDetailViewController: UIViewController, PlanetDetailDisplayLogic {
    
    // MARK: - IBActions
    
    @IBAction func favoriteButton(_ sender: UIBarButtonItem) {
    }
    
    // MARK: - IBOutlets
    
    @IBOutlet weak var rotationPeriod: UILabel!
    @IBOutlet weak var orbitalPeriod: UILabel!
    @IBOutlet weak var diameter: UILabel!
    @IBOutlet weak var gravity: UILabel!
    @IBOutlet weak var terrain: UILabel!
    @IBOutlet weak var surfaceWater: UILabel!
    @IBOutlet weak var population: UILabel!
    @IBOutlet weak var residents: UILabel!
    @IBOutlet weak var films: UILabel!
    @IBOutlet weak var created: UILabel!
    @IBOutlet weak var updated: UILabel!
    
    // MARK: - Public Variables
    
    var interactor: PlanetDetailBusinessLogic?
    var router: (NSObjectProtocol & PlanetDetailRoutingLogic & PlanetDetailDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = PlanetDetailInteractor()
        let presenter = PlanetDetailPresenter()
        let router = PlanetDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.showPlanetDetail()
    }
    
    func updateIsFavoritePlanet() {
        router?.goBackToPlanets()
    }
    
    func updateUI(with viewModel: PlanetDetail.FetchPlanetDetail.ViewModel) {
        
        self.title = viewModel.name
        rotationPeriod.text = "Período de rotação: \(viewModel.rotationPeriod)"
        orbitalPeriod.text = "Período de orbital: \(viewModel.orbitalPeriod)"
        diameter.text = "Diâmetro: \(viewModel.diameter)"
        gravity.text = "Gravidade: \(viewModel.gravity)"
        terrain.text = "Tipo de terreno: \(viewModel.terrain)"
        surfaceWater.text = "Água da superfície: \(viewModel.surfaceWater)"
        population.text = "População: \(viewModel.population)"
        residents.text = "Total de habitantes: \(viewModel.residents.count)"
        films.text = "Total de filmes: \(viewModel.films.count)"
        created.text = "Criado em: \(interactor?.formatDate(viewModel.created) ?? "")"
        updated.text = "Atualizado em: \(interactor?.formatDate(viewModel.edited) ?? "")"
    }
}
